<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-17T21:05:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">2channelkrt</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Mimicking Bach - Melody with LSTM</title><link href="http://localhost:4000/regular_post/2019/06/17/Mimicking-Bach-Melody-with-LSTM.html" rel="alternate" type="text/html" title="Mimicking Bach - Melody with LSTM" /><published>2019-06-17T00:00:01+09:00</published><updated>2019-06-17T00:00:01+09:00</updated><id>http://localhost:4000/regular_post/2019/06/17/Mimicking%20Bach%20-%20Melody%20with%20LSTM</id><content type="html" xml:base="http://localhost:4000/regular_post/2019/06/17/Mimicking-Bach-Melody-with-LSTM.html">&lt;p&gt;This is online version of the report for &lt;a href=&quot;https://github.com/2channelkrt/Mimicking-Bach&quot;&gt;Mimicking Bach&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;With explosive growth of computing powers, and recent take off of GPGPU, machine learning capabilities are expanding its boundaries day by day. Not only in mathematical and scientific fields of application, but what was once treated as unique ability of human, inspiration, is no longer exclusive feature of our own. This study is to find out whether machine learning can mimic the acoustic inspiration of human being, specially using Bachs’ creation. Big corporation such as Google has already tackled this subject, and showed possibility that machine can create its own music based on the training set. Several other attempts, including this one[1] also approached this subject and showed optimistic possibilities. So we thought, why not try it ourself?&lt;/p&gt;
&lt;h2 id=&quot;2-representing-music-data&quot;&gt;2. Representing Music Data&lt;/h2&gt;
&lt;p&gt;First, we need to split the music into sequence of little pieces, for neural model to understand. This study, we discretize continuous music file into sequence of events. For this study, such event is only when note is played/pressed. For simplicity, only highest note in the music (which tends to be the melody) is selected. This forms one-dimension one-hot representation of the note. For the beat, for each note played, we measure the duration of that note. Since duration(beat) of the note from the melody is usually multiples of duration of the shortest note played, beat also, can be classified to one dimensional one-hot vector. Then, using note and beat one-hot vector as a axis, we form two-dimensional one-hot vector, which is shown in Figure 1. Finally, we flat out two-dimensional one-hot vector to one-dimension. This is the input data format for the neural model.&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/1.png&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-dataset&quot;&gt;2.1 Dataset&lt;/h3&gt;
&lt;p&gt;Dataset used for this study is retrieved from MuseData, specifically only ‘Keyboard Music’ composed by ‘Johann Sebastian Bach’. Total data has 96 tracks formatted in MIDI.&lt;br /&gt;
&lt;a href=&quot;http://www.musedata.org/&quot;&gt;www.musedata.org&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;22-tools&quot;&gt;2.2 Tools&lt;/h3&gt;
&lt;p&gt;‘midicsv’ supports bidirectional conversion between MIDI and CSV file format.&lt;br /&gt;
&lt;a href=&quot;http://www.fourmilab.ch/webtools/midicsv/&quot;&gt;www.fourmilab.ch/webtools/midicsv/&lt;/a&gt;&lt;br /&gt;
Since converted CSV file provides intuitive, and simple view of the track, through this study, all MIDI files were converted to CSV format in order to build vectors for the neural network. After learning process is done, guesses and created musical melody was decomposed to CSV file format, then converted to audible MIDI file using ‘midicsv’.&lt;/p&gt;
&lt;h3 id=&quot;23-preprocessing&quot;&gt;2.3 Preprocessing&lt;/h3&gt;
&lt;p&gt;Before dumping all the data into the model for training, we need to manipulate our data into list of one-hot vectors. MIDI files have variety of information about how notes are played, but for our model, we just need to extract the note on \&amp;amp; off information. In order to simplify the conversion, we first filter our data through ‘midicsv’ tool. Using ‘midicsv’, MIDI files are converted to CSV file, containing information about which notes are played after another. Figure 2 shows the format of MIDI and output of ‘midicsv’.&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/2.png&quot; alt=&quot;image2&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;24-event-baed-multi-hot-vector&quot;&gt;2.4 Event-baed multi-hot vector&lt;/h3&gt;
&lt;p&gt;Input data is one-hot vector with length of (number_of_notes * number_of_beats). Standard piano has 88 notes, and dataset used for this study had more than 100 different length of beats. But notes below 36 never occurred, and more than 80% of the beat occurred summed up took less than 1% of the total note, as shown in Figure 3.&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/3.png&quot; alt=&quot;image3&quot; /&gt;&lt;br /&gt;
In order to reduce the dimension of the input, number of notes are reduced to 88-36=52, and beats with low rates of appearance was replaced with nearby more frequent beat(actual difference of the played time is unnoticeable to human), or deleted from the dataset(longest note was played for more than 100 times of the most frequent note, which is very unusual for man-created music. This is probably the residue data from data preprocessing). Trimmed data is shown in Figure 4, and note distribution is shown in Figure 5.&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/4.png&quot; alt=&quot;image4&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/5.png&quot; alt=&quot;image5&quot; /&gt;&lt;br /&gt;
Without reduction of input dimension, input size would be over 10,000. After reduction, input size was reduced below 1,000. For this method, input and output format is basically same for the ones used in models of one-hot vector representation of word sequence. Each node in the model would have output size same as input, and when gone through softmax filter, whole output for each node would be the distribution of probabilities of flattened out version of two-dimensional (note, beat) output. Then, vector with highest probability is chosen as {note, key} played.&lt;/p&gt;
&lt;h2 id=&quot;3-model&quot;&gt;3. Model&lt;/h2&gt;
&lt;p&gt;Since musical information has heavy sequential characteristics, LSTM followed by fully-connected layer is implemented for this study. Model would take one-hot vector as an input and produces an output, which is then fed into fully-connected layer, resulting in same shape as original input. After going through softmax filter, this becomes the machines’ guess of what event occurs next. At the training time, this final result is compared with real output(which actual next event, according to the music file) using cross-entropy loss. Figure 6 depicts overall model.&lt;br /&gt;
&lt;img src=&quot;/assets/MB_image/6.png&quot; alt=&quot;image6&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;4-result&quot;&gt;4. Result&lt;/h2&gt;
&lt;p&gt;loss at the start state was 6.8 and through using wider &amp;amp; deeper model, reached training &amp;amp; validation loss below 0.1, as shown in Figure 7. After done training, we had model to create its own melody, giving only the first note and beat tuple. Each time, we fed trained model with various first note, with most commonly used beat. Given a note &amp;amp; beat tuple as an input, model goes through forward calculation to produce an output, which is model’s guess of what note &amp;amp; beat will come next. At the training time, produced output will be compared against the real next output to calculate loss. This time however, we are barely feeding this output as a next input, as we are treating this process as composing music. Given one initial tuple of note &amp;amp; beat, model can generate infinite number of consequential tuples, as long as we like. Using midicsv utility, we can convert lists of note &amp;amp; beat tuples created from the model back to audible midi format. Files introduced below will be submitted with this report, are some tracks from the model’s creation. There are few noticeable characteristics of model’s creation, and it will be shown in discussion section.&lt;br /&gt;
  &lt;img src=&quot;/assets/MB_image/7.png&quot; alt=&quot;image7&quot; /&gt;&lt;br /&gt;
Try listening&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Fplaylists%2F714485637&amp;amp;&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;5-discussion&quot;&gt;5. Discussion&lt;/h2&gt;
&lt;p&gt;When creating results, various heights of notes were fed into the model as first note. For beat, most common beat was fed every time. For different model size and depth, same input was given. Comparison of created music with same input, from different model size were done, and there were couple noticeable pattern.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Given same input, some track with same input note and beat tuple were exactly same, regardless of model size(number of hidden nodes) and depth. All of these cases, created track was audibly acceptable.&lt;/li&gt;
  &lt;li&gt;Some track with seemingly arbitrary sequence of sounds found in smaller models, changed through bigger \&amp;amp; deeper models.&lt;/li&gt;
  &lt;li&gt;Some track shows partial random note \&amp;amp; beat sequence. The occurrence of these pattern is shown in various places in the track(at the beginning, middle, end).&lt;/li&gt;
  &lt;li&gt;When creating longer track than the original model’s length, repetitive melodies sometimes occur, but eventually it goes over to different melodies.&lt;/li&gt;
  &lt;li&gt;Starting off at less frequently used note doesn’t produce quite as well as frequently played note.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;6-conclusion&quot;&gt;6. Conclusion&lt;/h2&gt;
&lt;p&gt;Event-based approach produced meaningful results. This shows it is possible for machine to operate in the realms of creativity, which was believed to be unique ability of humanity.&lt;/p&gt;
&lt;h2 id=&quot;7-future-work&quot;&gt;7. Future Work&lt;/h2&gt;
&lt;p&gt;For this paper, representing musical notation is very similar to those of words. One-hot vector of word representation is very similar to event-based approach of this paper. Word2vec representation is very powerful method of representing words in vectors, and we believe musical events also can be represented in similar way. Finding relative co-occurrence of many different notational events may be capable of handling more variety of events without further expanding the size of the vectors.&lt;/p&gt;
&lt;h3 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h3&gt;
&lt;p&gt;This paper is done for the purpose of final project for COSE474, Korea University. We personally thank all the efforts done by prof. Choo and many TAs for the course.&lt;/p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;[1]Allen Huang, Raymond Wu: Deep Learning for Music, 2016.
  &lt;a href=&quot;https://cs224d.stanford.edu/reports/allenh.pdf&quot;&gt;https://cs224d.stanford.edu/reports/allenh.pdf&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This is online version of the report for Mimicking Bach.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2019/02/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-02-24T17:12:41+09:00</published><updated>2019-02-24T17:12:41+09:00</updated><id>http://localhost:4000/jekyll/update/2019/02/24/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/02/24/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>